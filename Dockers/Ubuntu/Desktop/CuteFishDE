# Images ------------------------------------------------------
FROM ubuntu:test

# Install -----------------------------------------------------
RUN DEBIAN_FRONTEND=noninteractive apt install -y tzdata      
RUN apt-get update && DEBIAN_FRONTEND=noninteractive          \
    apt install -y git devscripts build-essential ninja-build \
                   qtquickcontrols2-5-dev debhelper kwin-dev  \
                   modemmanager-qt-dev  extra-cmake-modules   \
                   libkf5screen-dev libqt5sensors5-dev        \
                   qttools5-dev-tools libxcb-icccm4-dev       \
                   libkdecorations2-dev  libdbusmenu-qt5-dev  \
                   libxcb-randr0-dev  libxcb-xfixes0-dev      \
                   libxcb-composite0-dev libxcb-shm0-dev      \
                   libpulse-dev libpolkit-agent-1-dev         \
                   libqt5x11extras5-dev libkf5kio-dev         \      
                   libxcb-ewmh-dev libpolkit-qt5-1-dev        \
                   libxcb-damage0-dev libkf5bluezqt-dev       \
                   xserver-xorg-input-libinput-dev            \
                   libx11-xcb-dev libkf5idletime-dev          \
                   libxcb-dpms0-dev libxcb-dri2-0-dev         \
                   libxcb-dri3-dev libxcb-glx0-dev            \
                   libxcb-record0-dev xserver-xorg-dev cmake  \
                   xserver-xorg-input-synaptics-dev           \
                   libxcursor-dev libqapt-dev qtbase5-dev     \
                   libkf5networkmanagerqt-dev libxtst-dev     \
                   qtdeclarative5-dev qtbase5-private-dev     \
                   libqt5xdg-dev libicu-dev libxcb-util-dev   \
                   libsm-dev qttools5-dev libxcb-image0-dev   \
                   libcanberra-dev libxcb-keysyms1-dev        \
                   libxcb-util0-dev

# Desktop Build -----------------------------------------------
RUN mkdir -p ~/Downloads/cutefish && cd ~/Downloads/cutefish  \
&&  git clone https://github.com/cutefishos/libcutefish.git   \
&&  cd libcutefish && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/fishui            \
&&  cd fishui && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/kwin-plugins      \
&&  cd kwin-plugins && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/launcher          \
&&  cd launcher && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/qt-plugins        \
&&  cd qt-plugins && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/wallpapers        \
&&  cd wallpapers && dpkg-buildpackage -uc -us -b -j16        \
&&  cd ~/Downloads/cutefish && apt-get install ./*.deb -y
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/dock              \
&&  cd dock && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/filemanager       \
&&  cd filemanager && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/terminal.git      \
&&  cd terminal && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/settings          \
&&  cd settings && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/statusbar         \
&&  cd statusbar && dpkg-buildpackage -uc -us -b -j16
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/core              \
&&  cd core && dpkg-buildpackage -uc -us -b -j16              
RUN cd ~/Downloads/cutefish && sudo apt-get install ./*.deb -y
RUN apt install -y libpam0g-dev libx11-dev qtbase5-dev        \ 
                   qtdeclarative5-dev qml-module-qtquick2     \
                   qml-module-qtquick-controls2 qttools5-dev  \
                   extra-cmake-modules qtquickcontrols2-5-dev \
                   qtdeclarative5-dev qttools5-dev-tools      
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/calculator        \
&&  cd calculator && mkdir build && cd build                  \
&&  cmake .. && make -j16 && make install
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/icons             \
&&  cd icons && mkdir build && cd build                       \
&&  cmake .. && make -j16 && make install
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/screenlocker      \
&&  cd screenlocker && mkdir build && cd build                \
&&  cmake .. && make -j16 && make install
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/sddm-theme        \
&&  cd sddm-theme && mkdir build && cd build                  \
&&  cmake .. && make -j16 && make install
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/debinstaller      \
&&  cd debinstaller && mkdir build && cd build                \
&&  cmake .. && make -j16 && make install
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/gtk-themes        \
&&  cd gtk-themes && mkdir build && cd build                  \
&&  cmake .. && make -j16 && make install
RUN apt install -y libmpv-dev qtdeclarative5-dev              \
                   qtquickcontrols2-5-dev
RUN cd ~/Downloads/cutefish                                   \
&&  git clone https://github.com/cutefishos/videoplayer       \
&&  cd videoplayer && mkdir build && cd build                 \
&&  cmake .. && make -j16 && make install


# Install Xserver ---------------------------------------------
RUN apt-get update && DEBIAN_FRONTEND=noninteractive          \
    apt install -y xserver-xorg-core-hwe-18.04 xauth          \
                   xserver-xorg-video-dummy curl net-tools    \   
                   xfonts-base xfonts-75dpi xfonts-100dpi     \
                   xfonts-scalable dbus-user-session 
#RUN apt install -y lxdm   
#RUN systemctl enable lxdm                                            
COPY configs/x11server/xorg.conf /usr/share/X11/xorg.conf.d/
COPY configs/x11server/create-pulse-clientconf.sh             \
     /etc/profile.d/
COPY configs/x11server/70-ubuntu.conf                         \
     /etc/lightdm/lightdm.conf.d/
RUN echo 'load-module module-native-protocol-unix '           \
    >> /etc/pulse/default.pa                                  \
&&  echo 'auth-anonymous=1 socket=/tmp/pulse-socket'          \
    >> /etc/pulse/default.pa

# Install OpenVGL----------------------------------------------
RUN apt update && DEBIAN_FRONTEND=noninteractive              \
    apt install -y --no-install-recommends                    \
    libvdpau1 mesa-vdpau-drivers libegl1-mesa
COPY binfile/virtualgl_amd64.deb /
RUN dpkg -i virtualgl_amd64.deb                               \
&&  rm virtualgl_amd64.deb                                    \
&&  echo 'XAUTHORITY=$HOME/.Xauthority.docker' >              \
         /etc/profile.d/Xauthority-fix.sh                     \
&&  ENV_1='export LD_PRELOAD=/usr/lib/libdlfaker.so:'         \
&&  ENV_2='/usr/lib/libvglfaker.so:$LD_PRELOAD'               \
&&  echo '${ENV_1}${ENV_2}' > /etc/profile.d/virtualgl.sh     \
&&  sed -i 's/use-ssh-agent/no-use-ssh-agent/'                \
        /etc/X11/Xsession.options

# Install Nomachine -------------------------------------------
COPY binfile/nomachine_amd64.deb /
RUN groupadd -r -g 2000 user                                  \
&&  useradd -u 2000 -m -r -g user user                        \
&&  dpkg -i /nomachine_amd64.deb && rm /nomachine_amd64.deb   \
&&  sed -i '$a PhysicalDesktopAuthorization 0'                \
    /usr/NX/etc/node.cfg                                      \
&&  sed -i '$a WaylandModes "egl,compositor,drm"'             \
    /usr/NX/etc/node.cfg


                   
# Install x11vnc ----------------------------------------------
RUN mkdir ~/.vnc && chmod 700 ~/.vnc && touch ~/.vnc/passwd
RUN touch  /root/.Xauthority
RUN apt install -y x11vnc 
RUN x11vnc -storepasswd PIKAPIKA ~/.vnc/passwd
#RUN apt install -y tightvncserver 
#RUN echo "PIKAPIKA\nPIKAPIKA\n" | vncpasswd


# Clean -------------------------------------------------------
RUN rm -rf ~/Downloads/*
RUN apt clean

# Install Softwares -------------------------------------------
RUN apt install -y firefox kwrite vlc transmission-qt         \
                   gimp gwenview fonts-liberation libu2f-udev
RUN LINK1="https://dl.google.com/linux/direct/"               \
&&  LINK2="google-chrome-stable_current_amd64.deb"            \
&&  wget "${LINK1}${LINK2}"
RUN dpkg -i google-chrome-stable_current_amd64.deb
RUN rm google-chrome-stable_current_amd64.deb

# Copy Run Time Script ----------------------------------------
# VNC ---------------------------------------------------------
RUN apt install -y dbus-x11 xinit neofetch
RUN echo 'session=xinit /bin/cutefish-session' > ~/.vnc/config
RUN echo 'geometry=1920x1080' >> ~/.vnc/config
RUN echo 'alwaysshared' >> ~/.vnc/config
RUN echo '#!/bin/sh' > ~/.vnc/xstartup
RUN echo 'export DISPLAY=:1' >> ~/.vnc/xstartup
RUN echo 'exec xinit /bin/cutefish-session &' >> ~/.vnc/xstartup
#COPY configs/x11server/sddm.conf /etc/
#RUN echo '127.0.0.1 localhost' >> /etc/hosts
#RUN echo '127.0.0.1 pika_test' >> /etc/hosts
RUN chmod -R +x ~/.vnc/*
#RUN apt install -y sddm neofetch
#RUN systemctl enable sddm  
# Start UP ----------------------------------------------------
RUN echo '#!/bin/bash' > /run.sh
RUN echo 'export DISPLAY=:0' >> /run.sh
RUN echo 'echo Starting Dbus ----------------------' >> /run.sh
RUN echo '/etc/init.d/dbus start' >> /run.sh
#RUN echo 'echo Starting SDDM ----------------------' >> /run.sh
#RUN echo 'service sddm start' >> /run.sh
RUN echo 'echo Starting NX ------------------------' >> /run.sh
RUN echo '/etc/NX/nxserver --startup' >> /run.sh
RUN echo '/etc/NX/nxserver --restart ' >> /run.sh
RUN echo 'echo Starting VNCS ----------------------' >> /run.sh
RUN echo 'export DISPLAY=:1' >> /run.sh
#RUN echo 'USER=root vncserver -kill :1' >> /run.sh
#RUN echo 'rm -rf /tmp/.X11-unix/X0' >> /run.sh
#RUN echo 'USER=root vncserver :1' >> /run.sh
# User VNC ---------------------------------------------------------------
#RUN mkdir -p /home/user/.vnc/ && touch /home/user/.vnc/passwd
#RUN chown -R user /home/user/
#RUN x11vnc -storepasswd PIKAPIKA /home/user/.vnc/passwd
#RUN echo 'session=xinit /bin/cutefish-session' > /home/user/.vnc/config
#RUN echo 'geometry=1920x1080' >> /home/user/.vnc/config
#RUN echo 'alwaysshared' >> /home/user/.vnc/config
#RUN echo '#!/bin/sh' > /home/user/.vnc/xstartup
#RUN echo 'export DISPLAY=:0' >> /home/user/.vnc/xstartup
#RUN echo 'exec xinit /bin/cutefish-session &' >> /home/user/.vnc/xstartup
#RUN touch  /home/user/.Xauthority
#RUN chown user /home/user/.Xauthority
#RUN TEXT1="su user -c 'x11vnc -auth guess -once -loop -noxdamage -repeat" \
#&&  TEXT2=" -rfbauth /home/user/.vnc/passwd -rfbport 5900 -shared &'"   \
#&&  echo "${TEXT1}${TEXT2}" >> /run.sh
#RUN TEXT1="x11vnc -display :1 -auth guess -once -loop -noxdamage -repeat" \
#&&  TEXT2=" -rfbauth ~/.vnc/passwd -rfbport 5900 -shared &"   \
#&&  echo "${TEXT1}${TEXT2}" >> /run.sh
RUN echo 'echo Starting SSHD ----------------------' >> /run.sh
RUN echo '/usr/sbin/sshd' >> /run.sh
RUN echo 'echo Start Desktop ----------------------' >> /run.sh
RUN echo 'export DISPLAY=:0'>> /run.sh
RUN echo 'xinit /bin/cutefish-session' >> /run.sh

# User --------------------------------------------------------
RUN echo "user ALL=(ALL)      ALL" >> /etc/sudoers

# Port Mapping ------------------------------------------------
EXPOSE 4000/tcp
#EXPOSE 5900/udp
CMD ["/run.sh"]
